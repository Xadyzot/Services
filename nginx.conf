user  nginx; # Standard Nginx user, runs worker processes
worker_processes  auto; # Set to auto for optimal usage

error_log  /var/log/nginx/error.log warn; # Log level 'warn' is good for production
pid        /var/run/nginx.pid;

events {
    worker_connections  1024; # Adjust based on your server load and open file limits
    # Multi_accept on; # Uncomment if you want worker processes to accept new connections whenever possible
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    tcp_nopush     on; # Optimize TCP sending
    tcp_nodelay    on; # Ensure data is sent as soon as possible

    keepalive_timeout  65;
    client_max_body_size 100M; # Increase if you allow large file uploads (e.g., media)

    # === SECURITY HEADERS (IMPORTANT!) ===
    # Add Strict-Transport-Security to force clients to use HTTPS for future requests
    # Only uncomment after verifying HTTPS works perfectly and all content is served over HTTPS
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header X-Frame-Options "DENY"; # Prevent clickjacking
    add_header X-Content-Type-Options "nosniff"; # Prevent MIME type sniffing attacks
    add_header X-XSS-Protection "1; mode=block"; # Enable browser's XSS filter
    add_header Referrer-Policy "no-referrer-when-downgrade"; # Control referrer information
    # Optional: Content-Security-Policy (CSP) - requires careful configuration for your specific site
    # add_header Content-Security-Policy "default-src 'self'; script-src 'self' example.com; style-src 'self' fonts.googleapis.com; img-src 'self' data:;";

    # === SSL/TLS SECURITY (Beyond Certbot's includes) ===
    ssl_protocols TLSv1.2 TLSv1.3; # Only allow strong TLS protocols
    ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES128-GCM-SHA256'; # Strong ciphers
    ssl_prefer_server_ciphers on; # Server's cipher preference over client's
    ssl_session_cache shared:SSL:10m; # Cache SSL sessions for performance
    ssl_session_timeout 1h; # Session timeout
    ssl_session_tickets off; # Disable session tickets for Perfect Forward Secrecy

    # Optional: SSL DH Parameters - If you generated ssl-dhparams.conf
    # include /etc/letsencrypt/ssl-dhparams.conf; # This is a separate file Certbot sometimes generates

    # === Rate Limiting (Protects against some DoS/brute-force attacks) ===
    # For general requests (e.g., limit to 5 requests per second on /)
    # Adjust 'zone' size and 'rate' as per your traffic
    limit_req_zone $binary_remote_addr zone=one:10m rate=5r/s;
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;

    server {
        server_name asmantourism.info www.asmantourism.info;

        listen 443 ssl;
        listen [::]:443 ssl;
        http2 on;

        ssl_certificate /etc/nginx/elifgroup.store.csr;
        ssl_certificate_key /etc/nginx//elifgroup.store.key;

        # Certbot standard SSL options (make sure this file exists, it's often generated by Certbot)
        # include /etc/letsencrypt/options-ssl-nginx.conf;

        # Apply rate limiting if enabled in http block
        limit_req zone=one burst=10 nodelay; # Apply this to specific locations if desired
        limit_conn conn_limit_per_ip 10; # Apply this to specific locations if desired

        location / {
            # Disable caching for dynamic content
            expires off;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";

            proxy_pass http://web:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 90; # Increase if Django responses are slow
        }

        location /static/ {
            alias /app/static/;
            expires 30d;
            add_header Cache-Control "public, no-transform";
            # Optional: Disable direct access to specific sensitive static files
            # location ~* \.(env|git|svn)$ { deny all; }
        }

        location /media/ {
            alias /app/media/;
            expires 30d;
            add_header Cache-Control "public, no-transform";
            # Optional: Disable direct access to specific sensitive media files
            # location ~* \.(env|git|svn)$ { deny all; }
        }
         location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Deny access to common sensitive files (e.g., for WordPress, useful as a general layer)
    # This might need adjustment if your app legitimately uses .env, .git, etc.
    location ~* /(wp-admin|wp-login|wp-config\.php|phpinfo\.php|\.env|\.git|\.svn|composer\.(json|lock)|package\.json)$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    }

    # Second server block: HTTP to HTTPS redirect and Certbot challenge
    server {
        limit_req zone=one burst=10 nodelay; # Apply this to specific locations if desired
        limit_conn conn_limit_per_ip 10; # Apply this to specific locations if desired
        if ($host = www.asmantourism.info) {
            return 301 https://$host$request_uri;
        }

        if ($host = asmantourism.info) {
            return 301 https://$host$request_uri;
        }

        listen 80;
        listen [::]:80;
        server_name asmantourism.info www.asmantourism.info;

        location ~ /.well-known/acme-challenge/ {
            root /var/www/certbot;
            allow all;
        }
 location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

     location ~* /(wp-admin|wp-login|wp-config\.php|phpinfo\.php|\.env|\.git|\.svn|composer\.(json|lock)|package\.json)$ {
        deny all;
        access_log off;
        log_not_found off;
    }
        return 301 https://$host$request_uri;
    }
}